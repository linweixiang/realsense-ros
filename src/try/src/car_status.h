// Generated by gencpp from file car/car_status.msg
// DO NOT EDIT!


#ifndef CAR_MESSAGE_CAR_STATUS_H
#define CAR_MESSAGE_CAR_STATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace car
{
template <class ContainerAllocator>
struct car_status_
{
  typedef car_status_<ContainerAllocator> Type;

  car_status_()
    : time(0)
    , status(0)
    , px(0.0)
    , py(0.0)
    , pz(0.0)
    , vx(0.0)
    , vy(0.0)
    , vz(0.0)
    , yaw(0.0)
    , pitch(0.0)
    , roll(0.0)  {
    }
  car_status_(const ContainerAllocator& _alloc)
    : time(0)
    , status(0)
    , px(0.0)
    , py(0.0)
    , pz(0.0)
    , vx(0.0)
    , vy(0.0)
    , vz(0.0)
    , yaw(0.0)
    , pitch(0.0)
    , roll(0.0)  {
  (void)_alloc;
    }



   typedef uint64_t _time_type;
  _time_type time;

   typedef uint8_t _status_type;
  _status_type status;

   typedef float _px_type;
  _px_type px;

   typedef float _py_type;
  _py_type py;

   typedef float _pz_type;
  _pz_type pz;

   typedef float _vx_type;
  _vx_type vx;

   typedef float _vy_type;
  _vy_type vy;

   typedef float _vz_type;
  _vz_type vz;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _roll_type;
  _roll_type roll;





  typedef boost::shared_ptr< ::car::car_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car::car_status_<ContainerAllocator> const> ConstPtr;

}; // struct car_status_

typedef ::car::car_status_<std::allocator<void> > car_status;

typedef boost::shared_ptr< ::car::car_status > car_statusPtr;
typedef boost::shared_ptr< ::car::car_status const> car_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car::car_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car::car_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::car::car_status_<ContainerAllocator1> & lhs, const ::car::car_status_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.status == rhs.status &&
    lhs.px == rhs.px &&
    lhs.py == rhs.py &&
    lhs.pz == rhs.pz &&
    lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.vz == rhs.vz &&
    lhs.yaw == rhs.yaw &&
    lhs.pitch == rhs.pitch &&
    lhs.roll == rhs.roll;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::car::car_status_<ContainerAllocator1> & lhs, const ::car::car_status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace car

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::car::car_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car::car_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car::car_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car::car_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car::car_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car::car_status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car::car_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4708c50435eab9caae1824db89482659";
  }

  static const char* value(const ::car::car_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4708c50435eab9caULL;
  static const uint64_t static_value2 = 0xae1824db89482659ULL;
};

template<class ContainerAllocator>
struct DataType< ::car::car_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car/car_status";
  }

  static const char* value(const ::car::car_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car::car_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 time\n"
"uint8 status\n"
"float32 px\n"
"float32 py\n"
"float32 pz\n"
"float32 vx\n"
"float32 vy\n"
"float32 vz\n"
"float32 yaw\n"
"float32 pitch\n"
"float32 roll\n"
"\n"
;
  }

  static const char* value(const ::car::car_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car::car_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.status);
      stream.next(m.px);
      stream.next(m.py);
      stream.next(m.pz);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.vz);
      stream.next(m.yaw);
      stream.next(m.pitch);
      stream.next(m.roll);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct car_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car::car_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car::car_status_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.time);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "px: ";
    Printer<float>::stream(s, indent + "  ", v.px);
    s << indent << "py: ";
    Printer<float>::stream(s, indent + "  ", v.py);
    s << indent << "pz: ";
    Printer<float>::stream(s, indent + "  ", v.pz);
    s << indent << "vx: ";
    Printer<float>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<float>::stream(s, indent + "  ", v.vy);
    s << indent << "vz: ";
    Printer<float>::stream(s, indent + "  ", v.vz);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_MESSAGE_CAR_STATUS_H
